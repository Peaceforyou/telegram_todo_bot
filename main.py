import telebot
import psycopg2
from conserv import connect_to_server
from datetime import date,datetime
from dotenv import load_dotenv
import os
import requests
from pydantic import BaseModel



# load variables from .env file
load_dotenv()

#Take my_id from .env file
my_id = int(os.getenv("MYID"))
# Take bot token from .env file
bot_token = os.getenv("TOKEN")



con, cursor = connect_to_server() 
bot = telebot.TeleBot(bot_token, parse_mode=None)



class Task(BaseModel):
    user_id: int
    message: str
    date_received: None


user_states = {}
def addtoserv(message, data,userid):
    data_to_send = {
        "user_id" : userid,
        "message" : message.text,
        "date_received" : None
    }
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å':
        del user_states[userid]
        bot.reply_to(message,'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
        return None
    try:
        response = requests.post('http://127.0.0.1:8000/add/tasks',json=data_to_send)
        bot.send_message(userid,response.text)
    except Exception as e:
        print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: ', e)


def delete_tasks(message,userid):
    data_to_send = {
        "user_id" : userid,
        "message" : message.text,
        "date_received" : None
    }
    response = requests.post('http://127.0.0.1:8000/delete/tasks',json=data_to_send)
    bot.send_message(userid, response.text)
    



def add_completed(message,userid):
    try:
        task_index = int(message) - 1
        now = datetime.now()
        month = now.month
        day = now.day
        hour = now.hour
        minute = now.minute
        cursor.execute("SELECT id FROM tasks WHERE users_id = %s", (userid,))
        rows = cursor.fetchall()
        if rows:
            real_task_id = rows[task_index]  
            cursor.execute("SELECT description FROM tasks WHERE id = %s", (real_task_id,))
            task_description = cursor.fetchone()[0]  
            cursor.execute("INSERT INTO completed (users_id,description,date) VALUES (%s,%s,%s)", (userid, task_description,f'{hour}:{minute} {day}.{month}',))
            cursor.execute("DELETE FROM tasks WHERE users_id = %s AND id = %s", (userid, real_task_id))
            bot.send_message(userid, '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏!')
        else:
            bot.send_message(userid, '–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!')
    except Exception as e:
        print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ', e)


def getfromserv(mes):
    user_id =  mes.from_user.id
    data_to_send  = {
        "userid": user_id
    }
    response = requests.get('http://127.0.0.1:8000/get/tasks/',params= data_to_send)
    if response.status_code == 404:
        bot.send_message(user_id,'–£–ø—Å, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á')
    else:
        bot.send_message(user_id,response.text)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å")
    btn2 = telebot.types.KeyboardButton("–°–ø–∏—Å–æ–∫")
    btn3 = telebot.types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
    btn4 = telebot.types.KeyboardButton("üóëÔ∏è")
    btn5 = telebot.types.KeyboardButton("‚úÖ")
    markup.add(btn1, btn2,btn3,btn4,btn5)
    try:
        cursor.execute("SELECT * FROM people WHERE user_id = %s", (user_id,))
        result = cursor.fetchall()
        if result:
            bot.reply_to(message, f'–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–î–æ–±–∞–≤–∏—Ç—å", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ "–°–ø–∏—Å–æ–∫", —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏!',reply_markup=markup)
        else:
            cursor.execute('INSERT INTO people (user_id) VALUES (%s)', (user_id,))
            bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É, "–°–ø–∏—Å–æ–∫" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, "–£–¥–∞–ª–∏—Ç—å" —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=markup)
            con.commit()
    except Exception as e:
        print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä', e)

@bot.message_handler(commands=['feedback'])
def send_feedback(message):
    user_id = message.from_user.id
    user_states[user_id] = 'waiting for the feedback'
    bot.reply_to(message, '–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å')

@bot.message_handler(commands=['alls'])
def send_feedback(message):
    user_id = message.from_user.id
    if user_id != my_id:
        bot.reply_to(message, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
    response = requests.get('http://127.0.0.1:8000/get/feedbacks')
    bot.send_message(my_id,response.text)
  

@bot.message_handler()
def showdata(message):
    user_id =  message.from_user.id
    denb = date.today()
    now = datetime.now()
    month = now.month
    day = now.day
    hour = now.hour
    minute = now.minute
    msg = message.text
    cursor.execute("SELECT * FROM people WHERE user_id = %s", (user_id,))
    user = cursor.fetchall()
    if not user:
        bot.reply_to(message, '–£–ø—Å, –Ω–µ –≤–∏–∂—É –≤–∞—Å –≤ –±–∞–∑–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "/start" —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!')
        return
    if msg.lower() == '—Å–ø–∏—Å–æ–∫':
        getfromserv(message)
    
    if msg.lower() == '‚úÖ':
        try:
            cursor.execute("SELECT description FROM completed WHERE users_id = %s", (str(user_id),))
            completes = cursor.fetchall()
            if completes:
                result = '\n'.join([f'{index + 1}.{str(row[0])}' for index,row in enumerate(completes)]) 
                bot.send_message(user_id, f'–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª! –†–∞–¥—É–π—Ç–µ—Å—å —Å–æ–±–æ–π‚úÖ \n{result}')
                bot.send_message(user_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü!')
        except Exception as e:
            bot.reply_to(message, f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!{e}')
        
    

    if msg.strip().lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å':  
        bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å!')
        user_states[user_id] = 'waiting for to be completed'
    elif user_id in user_states and user_states[user_id] == 'waiting for to be completed': 
            add_completed(msg,user_id)
            del user_states[user_id] 

    if msg.strip().lower() == '–¥–æ–±–∞–≤–∏—Ç—å':  
        bot.reply_to(message, '–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –±–æ—Ç—É!')
        user_states[user_id] = 'waiting for the answer' 
    elif user_id in user_states and user_states[user_id] == 'waiting for the answer': 
            addtoserv(message, denb, user_id)
            del user_states[user_id] 

    if msg.lower() == 'üóëÔ∏è':
        bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
        user_states[user_id] = 'waiting for the id to delete' 
    
    elif user_id in user_states and user_states[user_id] == 'waiting for the id to delete':
        delete_tasks(msg,user_id)
        del user_states[user_id] 

    elif user_id in user_states and user_states[user_id] == 'waiting for the feedback':
        try:
            cursor.execute("INSERT INTO feedbacks2 (text, date) VALUES (%s,%s)", (message.text,f'{hour}:{minute} {day}.{month}',))
            bot.reply_to(message, '–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
            bot.send_message(my_id, '–ú–∞–∫—Å, —Ç–µ–±–µ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ /alls')
        except Exception as e:
            print('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞', e)
        del user_states[user_id] 
    
        
    con.commit()

try:
    now = datetime.now()
    second = now.second
    bot.infinity_polling()
finally:
    con.close()
